from xlrd import open_workbook      
import xlwt 
from xlutils.copy import copy

import pandas as pd     #library used for data analysis
import numpy as np      #library used for scientific computation
#import matplotlib.pyplot as plt - provides matlab like plotting framework
from sklearn import metrics        #sklearn is a machine learning library with various algorithms, metrics measure performance
from sklearn.metrics import accuracy_score      #measures accuracy
from sklearn.model_selection import train_test_split        #this function splits data into training and testing datasets
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB      #the different naive bayes algorithm

book = open_workbook("dataset_predict.xls")
wb=copy(book)
w_sheet=wb.get_sheet(0)

my_file = "output.txt"

mydata= pd.read_csv("C:\\xampp\\htdocs\\dataset.csv", low_memory=False)     #importing the dataset. low_memory parameter is set as there are different datatypes
print(mydata)

X=mydata.iloc[:, 0:215].values      #features of the dataset are stored in X, cols 0 to 215
y=mydata.iloc[:, -1].values         #labels (the last col) is stored in variable y
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=17)  #test size gives the percentage of dataset                                                                                              to be the test data, random_state gives a                                                                                              specific value each time is run, if set                                                                                                to a particular number
print(mydata.shape)     #gives the number of rows and cols
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

#Multi-variate Bernoulli Naive Bayes The binomial model is useful if your feature vectors are binary (i.e., 0s and 1s). One application would be text classification with a bag of words model where the 0s 1s are "word occurs in the document" and "word does not occur in the document"

#Multinomial Naive Bayes The multinomial naive Bayes model is typically used for discrete counts. E.g., if we have a text classification problem, we can take the idea of bernoulli trials one step further and instead of "word occurs in the document" we have "count how often word occurs in the document", you can think of it as "number of times outcome number x_i is observed over the n trials"

#Gaussian Naive Bayes Here, we assume that the features follow a normal distribution. Instead of discrete counts, we have continuous features (e.g., the popular Iris dataset where the features are sepal width, petal width, sepal length, petal length).

BernNB = BernoulliNB(binarize=0.1)     
BernNB.fit(X_train, y_train)
print(BernNB)       #alpha used for smoothing; binarize used to specify that features have binary values; fit_prior learns class prior                      probabilities and class_prior adjusts the class priors according to data
y_expect=y_test
y_pred=BernNB.predict(X_test)   #performs classification on test data
print (accuracy_score(y_expect, y_pred))
print(y_pred)



MultiNB = MultinomialNB(alpha=2.0)   #complementnb is a modified version of multinb 
MultiNB.fit(X_train, y_train)
print(MultiNB)
y_pred=MultiNB.predict(X_test)
print (accuracy_score(y_expect, y_pred))
print(y_pred)



GausNB = GaussianNB()
GausNB.fit(X_train, y_train)
print(GausNB)   #var_smoothing portion of the largest variance of all features that is added to variances for calculation stability
y_pred=GausNB.predict(X_test)
print (accuracy_score(y_expect, y_pred))
print(y_pred)


def countt():
    infile = open(my_file,"r")
    numlines=0
    for line in infile:
        numlines=numlines+1
        if line.count(my_string):
            for sheet in book.sheets():
                for rowidx in range(sheet.nrows):
                    row = sheet.row(rowidx)
                    for colidx,cell in enumerate(row):
                        if cell.value == my_string:
                            w_sheet.write(1,colidx, 1)
                            wb.save("dataset_predict.xls")
                            break
    infile.close
    
my_string = "transact"
countt()
my_string = "onServiceConnected"
countt()
my_string = "bindService"
countt()
my_string = "attachInterface"
countt()
my_string = "ServiceConnection"
countt()
my_string = "android.os.Binder"
countt()
my_string = "SEND_SMS"
countt()
my_string = "Ljava.lang.Class.getCanonicalName"
countt()
my_string = "Ljava.lang.Class.getMethods"
countt()
my_string = "Ljava.lang.Class.cast"
countt()
my_string = "Ljava.net.URLDecoder"
countt()
my_string = "android.content.pm.Signature"
countt()
my_string = "android.telephony.SmsManager"
countt()
my_string = "READ_PHONE_STATE"
countt()
my_string = "getBinder"
countt()
my_string = "ClassLoader"
countt()
my_string = "Landroid.content.Context.registerReceiver"
countt()
my_string = "Ljava.lang.Class.getField"
countt()
my_string = "Landroid.content.Context.unregisterReceiver"
countt()
my_string = "GET_ACcounttS"
countt()
my_string = "RECEIVE_SMS"
countt()
my_string = "Ljava.lang.Class.getDeclaredField"
countt()
my_string = "READ_SMS"
countt()
my_string = "getCallingUid"
countt()
my_string = "Ljavax.crypto.spec.SecretKeySpec"
countt()
my_string = "android.intent.action.BOOT_COMPLETED"
countt()
my_string = "USE_CREDENTIALS"
countt()
my_string = "MANAGE_ACcounttS"
countt()
my_string = "android.content.pm.PackageInfo"
countt()
my_string = "KeySpec"
countt()
my_string = "TelephonyManager.getLine1Number"
countt()
my_string = "DexClassLoader"
countt()
my_string = "HttpGet.init"
countt()
my_string = "SecretKey"
countt()
my_string = "Ljava.lang.Class.getMethod"
countt()
my_string = "System.loadLibrary"
countt()
my_string = "android.intent.action.SEND"
countt()
my_string = "Ljavax.crypto.Cipher"
countt()
my_string = "WRITE_SMS"
countt()
my_string = "READ_SYNC_SETTINGS"
countt()
my_string = "AUTHENTICATE_ACcounttS"
countt()
my_string = "android.telephony.gsm.SmsManager"
countt()
my_string = "WRITE_HISTORY_BOOKMARKS"
countt()
my_string = "TelephonyManager.getSubscriberId"
countt()
my_string = "mount"
countt()
my_string = "INSTALL_PACKAGES"
countt()
my_string = "Runtime.getRuntime"
countt()
my_string = "CAMERA"
countt()
my_string = "Ljava.lang.Object.getClass"
countt()
my_string = "WRITE_SYNC_SETTINGS"
countt()
my_string = "READ_HISTORY_BOOKMARKS"
countt()
my_string = "Ljava.lang.Class.forName"
countt()
my_string = "INTERNET"
countt()
my_string = "android.intent.action.PACKAGE_REPLACED"
countt()
my_string= "Binder"
countt()
my_string= "RECORD_AUDIO"
countt()
my_string= "IBinder"
countt()
my_string= "android.os.IBinder"
countt()
my_string= "createSubprocess"
countt()
my_string= "NFC"
countt()
my_string= "ACCESS_LOCATION_EXTRA_COMMANDS"
countt()
my_string= "URLClassLoader"
countt()
my_string= "WRITE_APN_SETTINGS"
countt()
my_string= "abortBroadcast"
countt()
my_string= "BIND_REMOTEVIEWS"
countt()
my_string= "android.intent.action.TIME_SET"
countt()
my_string= "READ_PROFILE"
countt()
my_string= "TelephonyManager.getDeviceId"
countt()
my_string= "MODIFY_AUDIO_SETTINGS"
countt()
my_string= "getCallingPid"
countt()
my_string= "READ_SYNC_STATS"
countt()
my_string= "android.intent.action.PACKAGE_REMOVED"
countt()
my_string= "android.intent.action.TIMEZONE_CHANGED"
countt()
my_string= "WAKE_LOCK"
countt()
my_string= "RECEIVE_BOOT_COMPLETED"
countt()
my_string= "Ljava.lang.Class.getPackage"
countt()
my_string= "chmod"
countt()
my_string= "Ljava.lang.Class.getDeclaredClasses"
countt()
my_string= "android.intent.action.ACTION_POWER_DISCONNECTED"
countt()
my_string= "android.intent.action.PACKAGE_ADDED"
countt()
my_string= "PathClassLoader"
countt()
my_string= "TelephonyManager.getSimSerialNumber"
countt()
my_string= "Runtime.load"
countt()
my_string= "TelephonyManager.getCallState"
countt()
my_string= "BLUETOOTH"
countt()
my_string= "READ_CALENDAR"
countt()
my_string= "READ_CALL_LOG"
countt()
my_string= "SUBSCRIBED_FEEDS_WRITE"
countt()
my_string= "READ_EXTERNAL_STORAGE"
countt()
my_string= "TelephonyManager.getSimcounttryIso"
countt()
my_string= "sendMultipartTextMessage"
countt()
my_string= "VIBRATE"
countt()
my_string= "remount"
countt()
my_string= "android.intent.action.ACTION_SHUTDOWN"
countt()
my_string= "sendDataMessage"
countt()
my_string= "ACCESS_NETWORK_STATE"
countt()
my_string= "chown"
countt()
my_string= "HttpPost.init"
countt()
my_string= "Ljava.lang.Class.getClasses"
countt()
my_string= "SUBSCRIBED_FEEDS_READ"
countt()
my_string= "TelephonyManager.isNetworkRoaming"
countt()
my_string= "CHANGE_WIFI_MULTICAST_STATE"
countt()
my_string= "WRITE_CALENDAR"
countt()
my_string= "android.intent.action.PACKAGE_DATA_CLEARED"
countt()
my_string="MASTER_CLEAR"
countt()
my_string="HttpUriRequest"
countt()
my_string="UPDATE_DEVICE_STATS"
countt()
my_string="WRITE_CALL_LOG"
countt()
my_string="DELETE_PACKAGES"
countt()
my_string="GET_TASKS"
countt()
my_string="GLOBAL_SEARCH"
countt()
my_string="DELETE_CACHE_FILES"
countt()
my_string="WRITE_USER_DICTIONARY"
countt()
my_string="android.intent.action.PACKAGE_CHANGED"
countt()
my_string="android.intent.action.NEW_OUTGOING_CALL"
countt()
my_string="REORDER_TASKS"
countt()
my_string="WRITE_PROFILE"
countt()
my_string="SET_WALLPAPER"
countt()
my_string="BIND_INPUT_METHOD"
countt()
my_string="divideMessage"
countt()
my_string="READ_SOCIAL_STREAM"
countt()
my_string="READ_USER_DICTIONARY"
countt()
my_string="PROCESS_OUTGOING_CALLS"
countt()
my_string="CALL_PRIVILEGED"
countt()
my_string="Runtime.exec"
countt()
my_string="BIND_WALLPAPER"
countt()
my_string="RECEIVE_WAP_PUSH"
countt()
my_string="DUMP"
countt()
my_string="BATTERY_STATS"
countt()
my_string="ACCESS_COARSE_LOCATION"
countt()
my_string="SET_TIME"
countt()
my_string="android.intent.action.SENDTO"
countt()
my_string="WRITE_SOCIAL_STREAM"
countt()
my_string="WRITE_SETTINGS"
countt()
my_string="REBOOT"
countt()
my_string="BLUETOOTH_ADMIN"
countt()
my_string="TelephonyManager.getNetworkOperator"
countt()
my_string="/system/bin"
countt()
my_string="MessengerService"
countt()
my_string="BIND_DEVICE_ADMIN"
countt()
my_string="WRITE_GSERVICES"
countt()
my_string="IRemoteService"
countt()
my_string="KILL_BACKGROUND_PROCESSES"
countt()
my_string="ACcountt_MANAGER"
countt()
my_string="/system/app"
countt()
my_string="android.intent.action.CALL"
countt()
my_string="STATUS_BAR"
countt()
my_string="TelephonyManager.getSimOperator"
countt()
my_string="PERSISTENT_ACTIVITY"
countt()
my_string="CHANGE_NETWORK_STATE"
countt()
my_string="onBind"
countt()
my_string="Process.start"
countt()
my_string="android.intent.action.SCREEN_ON"
countt()
my_string="Context.bindService"
countt()
my_string="RECEIVE_MMS"
countt()
my_string="SET_TIME_ZONE"
countt()
my_string="android.intent.action.BATTERY_OKAY"
countt()
my_string="CONTROL_LOCATION_UPDATES"
countt()
my_string="BROADCAST_WAP_PUSH"
countt()
my_string="BIND_ACCESSIBILITY_SERVICE"
countt()
my_string="ADD_VOICEMAIL"
countt()
my_string="CALL_PHONE"
countt()
my_string="ProcessBuilder"
countt()
my_string="BIND_APPWIDGET"
countt()
my_string="FLASHLIGHT"
countt()
my_string="READ_LOGS"
countt()
my_string="Ljava.lang.Class.getResource"
countt()
my_string="defineClass"
countt()
my_string="SET_PROCESS_LIMIT"
countt()
my_string="android.intent.action.PACKAGE_RESTARTED"
countt()
my_string="MOUNT_UNMOUNT_FILESYSTEMS"
countt()
my_string="BIND_TEXT_SERVICE"
countt()
my_string="INSTALL_LOCATION_PROVIDER"
countt()
my_string="android.intent.action.CALL_BUTTON"
countt()
my_string="android.intent.action.SCREEN_OFF"
countt()
my_string="findClass"
countt()
my_string="SYSTEM_ALERT_WINDOW"
countt()
my_string="MOUNT_FORMAT_FILESYSTEMS"
countt()
my_string="CHANGE_CONFIGURATION"
countt()
my_string="CLEAR_APP_USER_DATA"
countt()
my_string="intent.action.RUN"
countt()
my_string="android.intent.action.SET_WALLPAPER"
countt()
my_string="CHANGE_WIFI_STATE"
countt()
my_string="READ_FRAME_BUFFER"
countt()
my_string="ACCESS_SURFACE_FLINGER"
countt()
my_string="Runtime.loadLibrary"
countt()
my_string="BROADCAST_SMS"
countt()
my_string="EXPAND_STATUS_BAR"
countt()
my_string="INTERNAL_SYSTEM_WINDOW"
countt()
my_string="android.intent.action.BATTERY_LOW"
countt()
my_string="SET_ACTIVITY_WATCHER"
countt()
my_string="WRITE_CONTACTS"
countt()
my_string="android.intent.action.ACTION_POWER_CONNECTED"
countt()
my_string="BIND_VPN_SERVICE"
countt()
my_string="DISABLE_KEYGUARD"
countt()
my_string="ACCESS_MOCK_LOCATION"
countt()
my_string="GET_PACKAGE_SIZE"
countt()
my_string="MODIFY_PHONE_STATE"
countt()
my_string="CHANGE_COMPONENT_ENABLED_STATE"
countt()
my_string="CLEAR_APP_CACHE"
countt()
my_string="SET_ORIENTATION"
countt()
my_string="READ_CONTACTS"
countt()
my_string="DEVICE_POWER"
countt()
my_string="HARDWARE_TEST"
countt()
my_string="ACCESS_WIFI_STATE"
countt()
my_string="WRITE_EXTERNAL_STORAGE"
countt()
my_string="ACCESS_FINE_LOCATION"
countt()
my_string="SET_WALLPAPER_HINTS"
countt()
my_string="SET_PREFERRED_APPLICATIONS"
countt()
my_string="WRITE_SECURE_SETTINGS"
countt()

for sheet in book.sheets():
    for rowidx in range(sheet.nrows):
        row = sheet.row(rowidx)
        for colidx,cell in enumerate(row):
            if sheet.cell.value == None:
                w_sheet.write(1,colidx, 0)
                wb.save("dataset_predict.xls")
                
print("Successful")


