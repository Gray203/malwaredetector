import pandas as pd     #library used for data analysis
import numpy as np      #library used for scientific computation
#import matplotlib.pyplot as plt - provides matlab like plotting framework
from sklearn import metrics        #sklearn is a machine learning library with various algorithms, metrics measure performance
from sklearn.metrics import accuracy_score      #measures accuracy
from sklearn.model_selection import train_test_split        #this function splits data into training and testing datasets
from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB      #the different naive bayes algorithm

mydata= pd.read_csv("C:\\xampp\\htdocs\\dataset.csv", low_memory=False) #importing the dataset. low_memory parameter is set as there                                                                            are different datatypes
excel_file="C:\\xampp\\htdocs\\dataset_predict.xls"
mydata_pred= pd.read_excel(excel_file)     

X=mydata.iloc[:, 0:215].values      #features of the dataset are stored in X, cols 0 to 215
y=mydata.iloc[:, -1].values         #labels (the last col) is stored in variable y
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=17)  #test size gives the percentage of dataset                                                                                              to be the test data, random_state gives a                                                                                              specific value each time is run, if set                                                                                                to a particular number
#print(mydata.shape)     #gives the number of rows and cols
#print(X_train.shape)
#print(X_test.shape)
#print(y_train.shape)
#print(y_test.shape)
#Multinomial Naive Bayes The multinomial naive Bayes model is typically used for discrete counts. E.g., if we have a text classification problem, we can take the idea of bernoulli trials one step further and instead of "word occurs in the document" we have "count how often word occurs in the document", you can think of it as "number of times outcome number x_i is observed over the n trials"


MultiNB = MultinomialNB(alpha=2.0)   #complementnb is a modified version of multinb 
MultiNB.fit(X_train, y_train)
print(MultiNB)
y_expect=y_test
y_pred=MultiNB.predict(X_test)
print (accuracy_score(y_expect, y_pred))
print(y_pred)

x_new=mydata_pred.iloc[:, 0:215].values
y_pred_new=MultiNB.predict(x_new)
print(y_pred_new)

